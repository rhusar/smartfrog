/* Generated By:JavaCC: Do not edit this line. DefaultParserTokenManager.java */
package org.smartfrog.sfcore.languages.sf;
import org.smartfrog.sfcore.languages.sf.sfcomponentdescription.SFComponentDescriptionImpl;
import org.smartfrog.sfcore.languages.sf.sfcomponentdescription.SFComponentDescription;
import org.smartfrog.sfcore.languages.sf.sfreference.SFApplyReference;
import org.smartfrog.sfcore.languages.sf.sfreference.SFReference;
import org.smartfrog.sfcore.languages.sf.sfreference.SFAssertReference;
import org.smartfrog.sfcore.languages.sf.sfreference.SFTBDReference;
import org.smartfrog.sfcore.languages.sf.constraints.FreeVar;
import org.smartfrog.sfcore.languages.sf.IncludeHandler;
import org.smartfrog.sfcore.reference.ReferencePart;
import org.smartfrog.sfcore.reference.HostReferencePart;
import org.smartfrog.sfcore.reference.PropertyReferencePart;
import org.smartfrog.sfcore.reference.IPropertyReferencePart;
import org.smartfrog.sfcore.reference.EnvPropertyReferencePart;
import org.smartfrog.sfcore.reference.IEnvPropertyReferencePart;
import org.smartfrog.sfcore.reference.HereReferencePart;
import org.smartfrog.sfcore.reference.RootReferencePart;
import org.smartfrog.sfcore.reference.AttribReferencePart;
import org.smartfrog.sfcore.reference.ThisReferencePart;
import org.smartfrog.sfcore.componentdescription.ComponentDescription;
import org.smartfrog.sfcore.common.Context;
import org.smartfrog.sfcore.common.SFNull;
import org.smartfrog.sfcore.common.SFByteArray;
import org.smartfrog.sfcore.common.SmartFrogException;
import java.io.Reader;
import java.util.Vector;
import java.util.Enumeration;
import java.util.Set;
import java.util.HashSet;

public class DefaultParserTokenManager implements DefaultParserConstants
{
  public  java.io.PrintStream debugStream = System.out;
  public  void setDebugStream(java.io.PrintStream ds) { debugStream = ds; }
private final int jjStopStringLiteralDfa_0(int pos, long active0, long active1)
{
   switch (pos)
   {
      case 0:
         if ((active0 & 0x10000000000140L) != 0L)
            return 2;
         if ((active0 & 0xe8f3f7ce000L) != 0L || (active1 & 0x3f9L) != 0L)
         {
            jjmatchedKind = 74;
            return 5;
         }
         if ((active0 & 0x4400000000000L) != 0L || (active1 & 0x4L) != 0L)
            return 51;
         if ((active0 & 0x810000L) != 0L)
            return 15;
         return -1;
      case 1:
         if ((active0 & 0x100L) != 0L)
            return 0;
         if ((active0 & 0xe8f3f7ce000L) != 0L || (active1 & 0x3b0L) != 0L)
         {
            jjmatchedKind = 74;
            jjmatchedPos = 1;
            return 5;
         }
         if ((active1 & 0x48L) != 0L)
            return 5;
         return -1;
      case 2:
         if ((active0 & 0x20000000000L) != 0L || (active1 & 0x200L) != 0L)
            return 5;
         if ((active0 & 0xc8f3f7ce000L) != 0L || (active1 & 0x1b0L) != 0L)
         {
            jjmatchedKind = 74;
            jjmatchedPos = 2;
            return 5;
         }
         return -1;
      case 3:
         if ((active0 & 0xc8120640000L) != 0L || (active1 & 0x30L) != 0L)
            return 5;
         if ((active0 & 0xe1f18e000L) != 0L || (active1 & 0x180L) != 0L)
         {
            jjmatchedKind = 74;
            jjmatchedPos = 3;
            return 5;
         }
         return -1;
      case 4:
         if ((active0 & 0x102000L) != 0L)
            return 5;
         if ((active0 & 0xe1f08c000L) != 0L || (active1 & 0x180L) != 0L)
         {
            jjmatchedKind = 74;
            jjmatchedPos = 4;
            return 5;
         }
         return -1;
      case 5:
         if ((active0 & 0xa1f080000L) != 0L || (active1 & 0x100L) != 0L)
         {
            jjmatchedKind = 74;
            jjmatchedPos = 5;
            return 5;
         }
         if ((active0 & 0x40000c000L) != 0L || (active1 & 0x80L) != 0L)
            return 5;
         return -1;
      case 6:
         if ((active0 & 0x21f000000L) != 0L || (active1 & 0x100L) != 0L)
         {
            jjmatchedKind = 74;
            jjmatchedPos = 6;
            return 5;
         }
         if ((active0 & 0x800080000L) != 0L)
            return 5;
         return -1;
      case 7:
         if ((active0 & 0xe000000L) != 0L || (active1 & 0x100L) != 0L)
         {
            jjmatchedKind = 74;
            jjmatchedPos = 7;
            return 5;
         }
         if ((active0 & 0x211000000L) != 0L)
            return 5;
         return -1;
      case 8:
         if ((active0 & 0xc000000L) != 0L)
         {
            jjmatchedKind = 74;
            jjmatchedPos = 8;
            return 5;
         }
         if ((active0 & 0x2000000L) != 0L || (active1 & 0x100L) != 0L)
            return 5;
         return -1;
      case 9:
         if ((active0 & 0xc000000L) != 0L)
         {
            jjmatchedKind = 74;
            jjmatchedPos = 9;
            return 5;
         }
         return -1;
      case 10:
         if ((active0 & 0x8000000L) != 0L)
         {
            jjmatchedKind = 74;
            jjmatchedPos = 10;
            return 5;
         }
         if ((active0 & 0x4000000L) != 0L)
            return 5;
         return -1;
      default :
         return -1;
   }
}
private final int jjStartNfa_0(int pos, long active0, long active1)
{
   return jjMoveNfa_0(jjStopStringLiteralDfa_0(pos, active0, active1), pos + 1);
}
private final int jjStopAtPos(int pos, int kind)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   return pos + 1;
}
private final int jjStartNfaWithStates_0(int pos, int kind, int state)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) { return pos + 1; }
   return jjMoveNfa_0(state, pos + 1);
}
private final int jjMoveStringLiteralDfa0_0()
{
   switch(curChar)
   {
      case 33:
         jjmatchedKind = 65;
         return jjMoveStringLiteralDfa1_0(0x200000000000000L, 0x0L);
      case 35:
         return jjMoveStringLiteralDfa1_0(0x810000L, 0x0L);
      case 37:
         return jjStopAtPos(0, 53);
      case 38:
         return jjMoveStringLiteralDfa1_0(0x4000000000000000L, 0x0L);
      case 40:
         return jjStopAtPos(0, 47);
      case 41:
         return jjStopAtPos(0, 48);
      case 42:
         return jjStopAtPos(0, 51);
      case 43:
         jjmatchedKind = 49;
         return jjMoveStringLiteralDfa1_0(0x40000000000000L, 0x0L);
      case 44:
         return jjStopAtPos(0, 17);
      case 45:
         jjmatchedKind = 50;
         return jjMoveStringLiteralDfa1_0(0x400000000000L, 0x4L);
      case 47:
         jjmatchedKind = 52;
         return jjMoveStringLiteralDfa1_0(0x140L, 0x0L);
      case 58:
         return jjStopAtPos(0, 38);
      case 59:
         return jjStopAtPos(0, 40);
      case 60:
         jjmatchedKind = 61;
         return jjMoveStringLiteralDfa1_0(0x880000000000000L, 0x0L);
      case 61:
         return jjMoveStringLiteralDfa1_0(0x100000000000000L, 0x0L);
      case 62:
         jjmatchedKind = 60;
         return jjMoveStringLiteralDfa1_0(0x400000000000000L, 0x0L);
      case 65:
         return jjMoveStringLiteralDfa1_0(0xe000L, 0x0L);
      case 67:
         return jjMoveStringLiteralDfa1_0(0x10000000L, 0x0L);
      case 68:
         return jjMoveStringLiteralDfa1_0(0x40000L, 0x0L);
      case 69:
         return jjMoveStringLiteralDfa1_0(0x4000000L, 0x120L);
      case 70:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x40L);
      case 72:
         return jjMoveStringLiteralDfa1_0(0x600000L, 0x0L);
      case 73:
         return jjMoveStringLiteralDfa1_0(0xa000000L, 0x8L);
      case 76:
         return jjMoveStringLiteralDfa1_0(0x20000000L, 0x0L);
      case 78:
         return jjMoveStringLiteralDfa1_0(0x100000000L, 0x0L);
      case 79:
         return jjMoveStringLiteralDfa1_0(0x200000000L, 0x0L);
      case 80:
         return jjMoveStringLiteralDfa1_0(0xc01000000L, 0x0L);
      case 82:
         return jjMoveStringLiteralDfa1_0(0x8000000000L, 0x0L);
      case 83:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x80L);
      case 84:
         return jjMoveStringLiteralDfa1_0(0x60000000000L, 0x10L);
      case 86:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x200L);
      case 91:
         jjmatchedKind = 31;
         return jjMoveStringLiteralDfa1_0(0x200000000000L, 0x0L);
      case 93:
         return jjStopAtPos(0, 37);
      case 101:
         return jjMoveStringLiteralDfa1_0(0x80000L, 0x0L);
      case 102:
         return jjMoveStringLiteralDfa1_0(0x100000L, 0x0L);
      case 116:
         return jjMoveStringLiteralDfa1_0(0x80000000000L, 0x0L);
      case 120:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x1L);
      case 123:
         return jjStopAtPos(0, 30);
      case 124:
         return jjMoveStringLiteralDfa1_0(0x8000100000000000L, 0x0L);
      case 125:
         return jjStopAtPos(0, 36);
      default :
         return jjMoveNfa_0(3, 0);
   }
}
private final int jjMoveStringLiteralDfa1_0(long active0, long active1)
{
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(0, active0, active1);
      return 1;
   }
   switch(curChar)
   {
      case 38:
         if ((active0 & 0x4000000000000000L) != 0L)
            return jjStopAtPos(1, 62);
         break;
      case 42:
         if ((active0 & 0x100L) != 0L)
            return jjStartNfaWithStates_0(1, 8, 0);
         break;
      case 43:
         if ((active0 & 0x40000000000000L) != 0L)
            return jjStopAtPos(1, 54);
         break;
      case 45:
         if ((active0 & 0x400000000000L) != 0L)
            return jjStopAtPos(1, 46);
         break;
      case 47:
         if ((active0 & 0x40L) != 0L)
            return jjStopAtPos(1, 6);
         break;
      case 61:
         if ((active0 & 0x100000000000000L) != 0L)
            return jjStopAtPos(1, 56);
         else if ((active0 & 0x200000000000000L) != 0L)
            return jjStopAtPos(1, 57);
         else if ((active0 & 0x400000000000000L) != 0L)
            return jjStopAtPos(1, 58);
         else if ((active0 & 0x800000000000000L) != 0L)
            return jjStopAtPos(1, 59);
         break;
      case 62:
         if ((active0 & 0x80000000000000L) != 0L)
            return jjStopAtPos(1, 55);
         else if ((active1 & 0x4L) != 0L)
            return jjStopAtPos(1, 66);
         break;
      case 65:
         return jjMoveStringLiteralDfa2_0(active0, 0x420040000L, active1, 0x200L);
      case 66:
         return jjMoveStringLiteralDfa2_0(active0, 0x20000000000L, active1, 0L);
      case 69:
         return jjMoveStringLiteralDfa2_0(active0, 0x8200000L, active1, 0L);
      case 70:
         if ((active1 & 0x8L) != 0L)
            return jjStartNfaWithStates_0(1, 67, 5);
         break;
      case 72:
         return jjMoveStringLiteralDfa2_0(active0, 0x40000000000L, active1, 0x10L);
      case 73:
         if ((active1 & 0x40L) != 0L)
            return jjStartNfaWithStates_0(1, 70, 5);
         break;
      case 76:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x20L);
      case 78:
         return jjMoveStringLiteralDfa2_0(active0, 0x4000000L, active1, 0x100L);
      case 79:
         return jjMoveStringLiteralDfa2_0(active0, 0x8010400000L, active1, 0L);
      case 80:
         return jjMoveStringLiteralDfa2_0(active0, 0x202002000L, active1, 0L);
      case 82:
         return jjMoveStringLiteralDfa2_0(active0, 0x801000000L, active1, 0L);
      case 83:
         return jjMoveStringLiteralDfa2_0(active0, 0x4000L, active1, 0L);
      case 84:
         return jjMoveStringLiteralDfa2_0(active0, 0x8000L, active1, 0L);
      case 85:
         return jjMoveStringLiteralDfa2_0(active0, 0x100000000L, active1, 0L);
      case 87:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x80L);
      case 93:
         if ((active0 & 0x100000000000L) != 0L)
            return jjStopAtPos(1, 44);
         break;
      case 97:
         return jjMoveStringLiteralDfa2_0(active0, 0x100000L, active1, 0L);
      case 99:
         return jjMoveStringLiteralDfa2_0(active0, 0x10000L, active1, 0L);
      case 105:
         return jjMoveStringLiteralDfa2_0(active0, 0x800000L, active1, 0L);
      case 114:
         return jjMoveStringLiteralDfa2_0(active0, 0x80000000000L, active1, 0L);
      case 120:
         return jjMoveStringLiteralDfa2_0(active0, 0x80000L, active1, 0L);
      case 124:
         if ((active0 & 0x200000000000L) != 0L)
            return jjStopAtPos(1, 45);
         else if ((active0 & 0x8000000000000000L) != 0L)
            return jjStopAtPos(1, 63);
         else if ((active1 & 0x1L) != 0L)
            return jjStopAtPos(1, 64);
         break;
      default :
         break;
   }
   return jjStartNfa_0(0, active0, active1);
}
private final int jjMoveStringLiteralDfa2_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(0, old0, old1); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(1, active0, active1);
      return 2;
   }
   switch(curChar)
   {
      case 68:
         if ((active0 & 0x20000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 41, 5);
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x100L);
      case 69:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x10L);
      case 73:
         return jjMoveStringLiteralDfa3_0(active0, 0x40000000000L, active1, 0x80L);
      case 76:
         return jjMoveStringLiteralDfa3_0(active0, 0x100000000L, active1, 0L);
      case 78:
         return jjMoveStringLiteralDfa3_0(active0, 0x18000000L, active1, 0L);
      case 79:
         return jjMoveStringLiteralDfa3_0(active0, 0x8801000000L, active1, 0L);
      case 80:
         return jjMoveStringLiteralDfa3_0(active0, 0x2000L, active1, 0L);
      case 82:
         if ((active1 & 0x200L) != 0L)
            return jjStartNfaWithStates_0(2, 73, 5);
         return jjMoveStringLiteralDfa3_0(active0, 0x402200000L, active1, 0L);
      case 83:
         return jjMoveStringLiteralDfa3_0(active0, 0x404000L, active1, 0x20L);
      case 84:
         return jjMoveStringLiteralDfa3_0(active0, 0x200048000L, active1, 0L);
      case 86:
         return jjMoveStringLiteralDfa3_0(active0, 0x4000000L, active1, 0L);
      case 90:
         return jjMoveStringLiteralDfa3_0(active0, 0x20000000L, active1, 0L);
      case 108:
         return jjMoveStringLiteralDfa3_0(active0, 0x100000L, active1, 0L);
      case 110:
         return jjMoveStringLiteralDfa3_0(active0, 0x800000L, active1, 0L);
      case 111:
         return jjMoveStringLiteralDfa3_0(active0, 0x10000L, active1, 0L);
      case 116:
         return jjMoveStringLiteralDfa3_0(active0, 0x80000L, active1, 0L);
      case 117:
         return jjMoveStringLiteralDfa3_0(active0, 0x80000000000L, active1, 0L);
      default :
         break;
   }
   return jjStartNfa_0(1, active0, active1);
}
private final int jjMoveStringLiteralDfa3_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(1, old0, old1); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(2, active0, active1);
      return 3;
   }
   switch(curChar)
   {
      case 65:
         if ((active0 & 0x40000L) != 0L)
            return jjStartNfaWithStates_0(3, 18, 5);
         break;
      case 67:
         return jjMoveStringLiteralDfa4_0(active0, 0x800000000L, active1, 0L);
      case 69:
         if ((active0 & 0x200000L) != 0L)
            return jjStartNfaWithStates_0(3, 21, 5);
         else if ((active1 & 0x20L) != 0L)
            return jjStartNfaWithStates_0(3, 69, 5);
         return jjMoveStringLiteralDfa4_0(active0, 0x400004000L, active1, 0L);
      case 73:
         return jjMoveStringLiteralDfa4_0(active0, 0x200000000L, active1, 0L);
      case 76:
         if ((active0 & 0x100000000L) != 0L)
            return jjStartNfaWithStates_0(3, 32, 5);
         return jjMoveStringLiteralDfa4_0(active0, 0x2000L, active1, 0L);
      case 78:
         if ((active1 & 0x10L) != 0L)
            return jjStartNfaWithStates_0(3, 68, 5);
         break;
      case 79:
         return jjMoveStringLiteralDfa4_0(active0, 0x2000000L, active1, 0L);
      case 80:
         return jjMoveStringLiteralDfa4_0(active0, 0x5000000L, active1, 0L);
      case 82:
         return jjMoveStringLiteralDfa4_0(active0, 0x8000L, active1, 0L);
      case 83:
         if ((active0 & 0x40000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 42, 5);
         return jjMoveStringLiteralDfa4_0(active0, 0x10000000L, active1, 0x100L);
      case 84:
         if ((active0 & 0x400000L) != 0L)
            return jjStartNfaWithStates_0(3, 22, 5);
         else if ((active0 & 0x8000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 39, 5);
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x80L);
      case 86:
         return jjMoveStringLiteralDfa4_0(active0, 0x8000000L, active1, 0L);
      case 89:
         if ((active0 & 0x20000000L) != 0L)
            return jjStartNfaWithStates_0(3, 29, 5);
         break;
      case 99:
         return jjMoveStringLiteralDfa4_0(active0, 0x800000L, active1, 0L);
      case 100:
         return jjMoveStringLiteralDfa4_0(active0, 0x10000L, active1, 0L);
      case 101:
         if ((active0 & 0x80000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 43, 5);
         return jjMoveStringLiteralDfa4_0(active0, 0x80000L, active1, 0L);
      case 115:
         return jjMoveStringLiteralDfa4_0(active0, 0x100000L, active1, 0L);
      default :
         break;
   }
   return jjStartNfa_0(2, active0, active1);
}
private final int jjMoveStringLiteralDfa4_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(2, old0, old1); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(3, active0, active1);
      return 4;
   }
   switch(curChar)
   {
      case 67:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x80L);
      case 69:
         return jjMoveStringLiteralDfa5_0(active0, 0x801000000L, active1, 0L);
      case 73:
         return jjMoveStringLiteralDfa5_0(active0, 0x8000L, active1, 0L);
      case 78:
         return jjMoveStringLiteralDfa5_0(active0, 0x400000000L, active1, 0L);
      case 79:
         return jjMoveStringLiteralDfa5_0(active0, 0x200000000L, active1, 0L);
      case 80:
         return jjMoveStringLiteralDfa5_0(active0, 0xa000000L, active1, 0L);
      case 82:
         return jjMoveStringLiteralDfa5_0(active0, 0x4004000L, active1, 0L);
      case 84:
         return jjMoveStringLiteralDfa5_0(active0, 0x10000000L, active1, 0L);
      case 87:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x100L);
      case 89:
         if ((active0 & 0x2000L) != 0L)
            return jjStartNfaWithStates_0(4, 13, 5);
         break;
      case 101:
         if ((active0 & 0x100000L) != 0L)
            return jjStartNfaWithStates_0(4, 20, 5);
         return jjMoveStringLiteralDfa5_0(active0, 0x10000L, active1, 0L);
      case 108:
         return jjMoveStringLiteralDfa5_0(active0, 0x800000L, active1, 0L);
      case 110:
         return jjMoveStringLiteralDfa5_0(active0, 0x80000L, active1, 0L);
      default :
         break;
   }
   return jjStartNfa_0(3, active0, active1);
}
private final int jjMoveStringLiteralDfa5_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(3, old0, old1); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(4, active0, active1);
      return 5;
   }
   switch(curChar)
   {
      case 65:
         return jjMoveStringLiteralDfa6_0(active0, 0x10000000L, active1, 0L);
      case 66:
         if ((active0 & 0x8000L) != 0L)
            return jjStartNfaWithStates_0(5, 15, 5);
         break;
      case 69:
         return jjMoveStringLiteralDfa6_0(active0, 0x2000000L, active1, 0L);
      case 72:
         if ((active1 & 0x80L) != 0L)
            return jjStartNfaWithStates_0(5, 71, 5);
         break;
      case 73:
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x100L);
      case 78:
         return jjMoveStringLiteralDfa6_0(active0, 0x200000000L, active1, 0L);
      case 79:
         return jjMoveStringLiteralDfa6_0(active0, 0x4000000L, active1, 0L);
      case 82:
         return jjMoveStringLiteralDfa6_0(active0, 0x9000000L, active1, 0L);
      case 83:
         return jjMoveStringLiteralDfa6_0(active0, 0x800000000L, active1, 0L);
      case 84:
         if ((active0 & 0x4000L) != 0L)
            return jjStartNfaWithStates_0(5, 14, 5);
         else if ((active0 & 0x400000000L) != 0L)
            return jjStartNfaWithStates_0(5, 34, 5);
         break;
      case 98:
         return jjMoveStringLiteralDfa6_0(active0, 0x10000L, active1, 0L);
      case 100:
         return jjMoveStringLiteralDfa6_0(active0, 0x80000L, active1, 0L);
      case 117:
         return jjMoveStringLiteralDfa6_0(active0, 0x800000L, active1, 0L);
      default :
         break;
   }
   return jjStartNfa_0(4, active0, active1);
}
private final int jjMoveStringLiteralDfa6_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(4, old0, old1); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(5, active0, active1);
      return 6;
   }
   switch(curChar)
   {
      case 65:
         return jjMoveStringLiteralDfa7_0(active0, 0x200000000L, active1, 0L);
      case 78:
         return jjMoveStringLiteralDfa7_0(active0, 0x10000000L, active1, 0L);
      case 79:
         return jjMoveStringLiteralDfa7_0(active0, 0x8000000L, active1, 0L);
      case 80:
         return jjMoveStringLiteralDfa7_0(active0, 0x4000000L, active1, 0L);
      case 82:
         return jjMoveStringLiteralDfa7_0(active0, 0x2000000L, active1, 0L);
      case 83:
         if ((active0 & 0x800000000L) != 0L)
            return jjStartNfaWithStates_0(6, 35, 5);
         break;
      case 84:
         return jjMoveStringLiteralDfa7_0(active0, 0x1000000L, active1, 0x100L);
      case 97:
         return jjMoveStringLiteralDfa7_0(active0, 0x10000L, active1, 0L);
      case 100:
         return jjMoveStringLiteralDfa7_0(active0, 0x800000L, active1, 0L);
      case 115:
         if ((active0 & 0x80000L) != 0L)
            return jjStartNfaWithStates_0(6, 19, 5);
         break;
      default :
         break;
   }
   return jjStartNfa_0(5, active0, active1);
}
private final int jjMoveStringLiteralDfa7_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(5, old0, old1); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(6, active0, active1);
      return 7;
   }
   switch(curChar)
   {
      case 67:
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0x100L);
      case 69:
         return jjMoveStringLiteralDfa8_0(active0, 0x4000000L, active1, 0L);
      case 76:
         if ((active0 & 0x200000000L) != 0L)
            return jjStartNfaWithStates_0(7, 33, 5);
         break;
      case 80:
         return jjMoveStringLiteralDfa8_0(active0, 0x8000000L, active1, 0L);
      case 84:
         if ((active0 & 0x10000000L) != 0L)
            return jjStartNfaWithStates_0(7, 28, 5);
         return jjMoveStringLiteralDfa8_0(active0, 0x2000000L, active1, 0L);
      case 89:
         if ((active0 & 0x1000000L) != 0L)
            return jjStartNfaWithStates_0(7, 24, 5);
         break;
      case 101:
         if ((active0 & 0x800000L) != 0L)
            return jjStopAtPos(7, 23);
         break;
      case 115:
         return jjMoveStringLiteralDfa8_0(active0, 0x10000L, active1, 0L);
      default :
         break;
   }
   return jjStartNfa_0(6, active0, active1);
}
private final int jjMoveStringLiteralDfa8_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(6, old0, old1); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(7, active0, active1);
      return 8;
   }
   switch(curChar)
   {
      case 69:
         return jjMoveStringLiteralDfa9_0(active0, 0x8000000L, active1, 0L);
      case 72:
         if ((active1 & 0x100L) != 0L)
            return jjStartNfaWithStates_0(8, 72, 5);
         break;
      case 82:
         return jjMoveStringLiteralDfa9_0(active0, 0x4000000L, active1, 0L);
      case 89:
         if ((active0 & 0x2000000L) != 0L)
            return jjStartNfaWithStates_0(8, 25, 5);
         break;
      case 101:
         if ((active0 & 0x10000L) != 0L)
            return jjStopAtPos(8, 16);
         break;
      default :
         break;
   }
   return jjStartNfa_0(7, active0, active1);
}
private final int jjMoveStringLiteralDfa9_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(7, old0, old1); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(8, active0, 0L);
      return 9;
   }
   switch(curChar)
   {
      case 82:
         return jjMoveStringLiteralDfa10_0(active0, 0x8000000L);
      case 84:
         return jjMoveStringLiteralDfa10_0(active0, 0x4000000L);
      default :
         break;
   }
   return jjStartNfa_0(8, active0, 0L);
}
private final int jjMoveStringLiteralDfa10_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(8, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(9, active0, 0L);
      return 10;
   }
   switch(curChar)
   {
      case 84:
         return jjMoveStringLiteralDfa11_0(active0, 0x8000000L);
      case 89:
         if ((active0 & 0x4000000L) != 0L)
            return jjStartNfaWithStates_0(10, 26, 5);
         break;
      default :
         break;
   }
   return jjStartNfa_0(9, active0, 0L);
}
private final int jjMoveStringLiteralDfa11_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(9, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(10, active0, 0L);
      return 11;
   }
   switch(curChar)
   {
      case 89:
         if ((active0 & 0x8000000L) != 0L)
            return jjStartNfaWithStates_0(11, 27, 5);
         break;
      default :
         break;
   }
   return jjStartNfa_0(10, active0, 0L);
}
private final void jjCheckNAdd(int state)
{
   if (jjrounds[state] != jjround)
   {
      jjstateSet[jjnewStateCnt++] = state;
      jjrounds[state] = jjround;
   }
}
private final void jjAddStates(int start, int end)
{
   do {
      jjstateSet[jjnewStateCnt++] = jjnextStates[start];
   } while (start++ != end);
}
private final void jjCheckNAddTwoStates(int state1, int state2)
{
   jjCheckNAdd(state1);
   jjCheckNAdd(state2);
}
private final void jjCheckNAddStates(int start, int end)
{
   do {
      jjCheckNAdd(jjnextStates[start]);
   } while (start++ != end);
}
private final void jjCheckNAddStates(int start)
{
   jjCheckNAdd(jjnextStates[start]);
   jjCheckNAdd(jjnextStates[start + 1]);
}
static final long[] jjbitVec0 = {
   0xfffffffffffffffeL, 0xffffffffffffffffL, 0xffffffffffffffffL, 0xffffffffffffffffL
};
static final long[] jjbitVec2 = {
   0x0L, 0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL
};
static final long[] jjbitVec3 = {
   0x0L, 0x0L, 0x420043c00000000L, 0xff7fffffff7fffffL
};
private final int jjMoveNfa_0(int startState, int curPos)
{
   int[] nextStates;
   int startsAt = 0;
   jjnewStateCnt = 98;
   int i = 1;
   jjstateSet[0] = startState;
   int j, kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 15:
                  if (curChar == 35)
                     jjCheckNAddStates(0, 2);
                  break;
               case 3:
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 80)
                        kind = 80;
                     jjCheckNAddStates(3, 19);
                  }
                  else if (curChar == 46)
                     jjCheckNAddTwoStates(52, 60);
                  else if (curChar == 45)
                     jjCheckNAddStates(20, 25);
                  else if (curChar == 35)
                     jjAddStates(26, 31);
                  else if (curChar == 34)
                     jjCheckNAddStates(32, 34);
                  else if (curChar == 36)
                  {
                     if (kind > 74)
                        kind = 74;
                     jjCheckNAdd(5);
                  }
                  else if (curChar == 47)
                     jjstateSet[jjnewStateCnt++] = 2;
                  if (curChar == 48)
                  {
                     if (kind > 80)
                        kind = 80;
                     jjCheckNAdd(58);
                  }
                  break;
               case 51:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddStates(35, 41);
                  else if (curChar == 46)
                     jjCheckNAdd(60);
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 85)
                        kind = 85;
                     jjCheckNAddStates(42, 48);
                  }
                  else if (curChar == 46)
                     jjCheckNAdd(52);
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(57, 58);
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 80)
                        kind = 80;
                     jjCheckNAdd(50);
                  }
                  break;
               case 0:
                  if (curChar == 42)
                     jjstateSet[jjnewStateCnt++] = 1;
                  break;
               case 1:
                  if ((0xffff7fffffffffffL & l) != 0L && kind > 7)
                     kind = 7;
                  break;
               case 2:
                  if (curChar == 42)
                     jjstateSet[jjnewStateCnt++] = 0;
                  break;
               case 4:
                  if (curChar != 36)
                     break;
                  if (kind > 74)
                     kind = 74;
                  jjCheckNAdd(5);
                  break;
               case 5:
                  if ((0x3ff687800000000L & l) == 0L)
                     break;
                  if (kind > 74)
                     kind = 74;
                  jjCheckNAdd(5);
                  break;
               case 6:
                  if (curChar == 34)
                     jjCheckNAddStates(32, 34);
                  break;
               case 7:
                  if ((0xfffffffbffffdbffL & l) != 0L)
                     jjCheckNAddStates(32, 34);
                  break;
               case 9:
                  if ((0x8400000000L & l) != 0L)
                     jjCheckNAddStates(32, 34);
                  break;
               case 10:
                  if (curChar == 34 && kind > 78)
                     kind = 78;
                  break;
               case 11:
                  if ((0xf000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 12;
                  break;
               case 12:
                  if ((0xff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 13;
                  break;
               case 13:
                  if ((0xff000000000000L & l) != 0L)
                     jjCheckNAddStates(32, 34);
                  break;
               case 14:
                  if (curChar == 35)
                     jjAddStates(26, 31);
                  break;
               case 16:
                  if ((0xfffffff7ffffffffL & l) != 0L)
                     jjCheckNAddStates(0, 2);
                  break;
               case 18:
                  if ((0x8800000000L & l) != 0L)
                     jjCheckNAddStates(0, 2);
                  break;
               case 19:
                  if (curChar == 35 && kind > 79)
                     kind = 79;
                  break;
               case 20:
                  if ((0xf000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 21;
                  break;
               case 21:
                  if ((0xff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 22;
                  break;
               case 22:
                  if ((0xff000000000000L & l) != 0L)
                     jjCheckNAddStates(0, 2);
                  break;
               case 23:
                  if (curChar == 35)
                     jjCheckNAddTwoStates(24, 25);
                  break;
               case 24:
                  if ((0x3ff000100000600L & l) != 0L)
                     jjCheckNAddTwoStates(24, 25);
                  break;
               case 25:
                  if (curChar == 35 && kind > 86)
                     kind = 86;
                  break;
               case 29:
                  if (curChar == 35)
                     jjCheckNAddTwoStates(30, 25);
                  break;
               case 30:
                  if ((0x3ff000100000600L & l) != 0L)
                     jjCheckNAddTwoStates(30, 25);
                  break;
               case 34:
                  if (curChar == 35)
                     jjCheckNAddTwoStates(35, 25);
                  break;
               case 35:
                  if ((0xff000100000600L & l) != 0L)
                     jjCheckNAddTwoStates(35, 25);
                  break;
               case 39:
                  if (curChar == 35)
                     jjCheckNAddTwoStates(40, 25);
                  break;
               case 40:
                  if ((0x3000100000600L & l) != 0L)
                     jjCheckNAddTwoStates(40, 25);
                  break;
               case 44:
                  if (curChar == 35)
                     jjCheckNAddTwoStates(45, 25);
                  break;
               case 45:
                  if ((0x23ff880100000600L & l) != 0L)
                     jjCheckNAddTwoStates(45, 25);
                  break;
               case 46:
                  if (curChar == 52)
                     jjstateSet[jjnewStateCnt++] = 44;
                  break;
               case 47:
                  if (curChar == 54)
                     jjstateSet[jjnewStateCnt++] = 46;
                  break;
               case 49:
                  if (curChar == 45)
                     jjCheckNAddStates(20, 25);
                  break;
               case 50:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 80)
                     kind = 80;
                  jjCheckNAdd(50);
                  break;
               case 52:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddStates(49, 51);
                  break;
               case 54:
                  if ((0x280000000000L & l) != 0L)
                     jjCheckNAdd(55);
                  break;
               case 55:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(55, 56);
                  break;
               case 57:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(57, 58);
                  break;
               case 59:
                  if (curChar == 46)
                     jjCheckNAdd(60);
                  break;
               case 60:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 85)
                     kind = 85;
                  jjCheckNAddStates(52, 54);
                  break;
               case 62:
                  if ((0x280000000000L & l) != 0L)
                     jjCheckNAdd(63);
                  break;
               case 63:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 85)
                     kind = 85;
                  jjCheckNAddTwoStates(63, 64);
                  break;
               case 65:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 85)
                     kind = 85;
                  jjCheckNAddStates(42, 48);
                  break;
               case 66:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(66, 67);
                  break;
               case 67:
                  if (curChar != 46)
                     break;
                  if (kind > 85)
                     kind = 85;
                  jjCheckNAddStates(55, 57);
                  break;
               case 68:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 85)
                     kind = 85;
                  jjCheckNAddStates(55, 57);
                  break;
               case 70:
                  if ((0x280000000000L & l) != 0L)
                     jjCheckNAdd(71);
                  break;
               case 71:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 85)
                     kind = 85;
                  jjCheckNAddTwoStates(71, 64);
                  break;
               case 72:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(72, 73);
                  break;
               case 74:
                  if ((0x280000000000L & l) != 0L)
                     jjCheckNAdd(75);
                  break;
               case 75:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 85)
                     kind = 85;
                  jjCheckNAddTwoStates(75, 64);
                  break;
               case 76:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 85)
                     kind = 85;
                  jjCheckNAddStates(58, 60);
                  break;
               case 78:
                  if ((0x280000000000L & l) != 0L)
                     jjCheckNAdd(79);
                  break;
               case 79:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 85)
                     kind = 85;
                  jjCheckNAddTwoStates(79, 64);
                  break;
               case 80:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddStates(35, 41);
                  break;
               case 81:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(81, 82);
                  break;
               case 82:
                  if (curChar == 46)
                     jjCheckNAddStates(61, 63);
                  break;
               case 83:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddStates(61, 63);
                  break;
               case 85:
                  if ((0x280000000000L & l) != 0L)
                     jjCheckNAdd(86);
                  break;
               case 86:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(86, 56);
                  break;
               case 87:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(87, 88);
                  break;
               case 89:
                  if ((0x280000000000L & l) != 0L)
                     jjCheckNAdd(90);
                  break;
               case 90:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(90, 56);
                  break;
               case 91:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddStates(64, 66);
                  break;
               case 93:
                  if ((0x280000000000L & l) != 0L)
                     jjCheckNAdd(94);
                  break;
               case 94:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(94, 56);
                  break;
               case 95:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 80)
                     kind = 80;
                  jjCheckNAddStates(3, 19);
                  break;
               case 96:
                  if (curChar != 48)
                     break;
                  if (kind > 80)
                     kind = 80;
                  jjCheckNAdd(58);
                  break;
               case 97:
                  if (curChar == 46)
                     jjCheckNAddTwoStates(52, 60);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 15:
                  if (curChar == 66)
                     jjstateSet[jjnewStateCnt++] = 47;
                  else if (curChar == 79)
                     jjstateSet[jjnewStateCnt++] = 37;
                  else if (curChar == 68)
                     jjstateSet[jjnewStateCnt++] = 32;
                  else if (curChar == 72)
                     jjstateSet[jjnewStateCnt++] = 27;
                  if (curChar == 66)
                     jjstateSet[jjnewStateCnt++] = 42;
                  break;
               case 3:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 74)
                     kind = 74;
                  jjCheckNAdd(5);
                  break;
               case 1:
                  if (kind > 7)
                     kind = 7;
                  break;
               case 5:
                  if ((0x47fffffec7ffffffL & l) == 0L)
                     break;
                  if (kind > 74)
                     kind = 74;
                  jjCheckNAdd(5);
                  break;
               case 7:
                  if ((0xffffffffefffffffL & l) != 0L)
                     jjCheckNAddStates(32, 34);
                  break;
               case 8:
                  if (curChar == 92)
                     jjAddStates(67, 68);
                  break;
               case 9:
                  if ((0x14404410000000L & l) != 0L)
                     jjCheckNAddStates(32, 34);
                  break;
               case 16:
                  if ((0xffffffffefffffffL & l) != 0L)
                     jjCheckNAddStates(0, 2);
                  break;
               case 17:
                  if (curChar == 92)
                     jjAddStates(69, 70);
                  break;
               case 18:
                  if ((0x14404410000000L & l) != 0L)
                     jjCheckNAddStates(0, 2);
                  break;
               case 24:
                  if ((0x7e0000007eL & l) != 0L)
                     jjCheckNAddTwoStates(24, 25);
                  break;
               case 26:
                  if (curChar == 88)
                     jjstateSet[jjnewStateCnt++] = 23;
                  break;
               case 27:
                  if (curChar == 69)
                     jjstateSet[jjnewStateCnt++] = 26;
                  break;
               case 28:
                  if (curChar == 72)
                     jjstateSet[jjnewStateCnt++] = 27;
                  break;
               case 31:
                  if (curChar == 67)
                     jjstateSet[jjnewStateCnt++] = 29;
                  break;
               case 32:
                  if (curChar == 69)
                     jjstateSet[jjnewStateCnt++] = 31;
                  break;
               case 33:
                  if (curChar == 68)
                     jjstateSet[jjnewStateCnt++] = 32;
                  break;
               case 36:
                  if (curChar == 84)
                     jjstateSet[jjnewStateCnt++] = 34;
                  break;
               case 37:
                  if (curChar == 67)
                     jjstateSet[jjnewStateCnt++] = 36;
                  break;
               case 38:
                  if (curChar == 79)
                     jjstateSet[jjnewStateCnt++] = 37;
                  break;
               case 41:
                  if (curChar == 78)
                     jjstateSet[jjnewStateCnt++] = 39;
                  break;
               case 42:
                  if (curChar == 73)
                     jjstateSet[jjnewStateCnt++] = 41;
                  break;
               case 43:
                  if (curChar == 66)
                     jjstateSet[jjnewStateCnt++] = 42;
                  break;
               case 45:
                  if ((0x7e0000007eL & l) != 0L)
                     jjCheckNAddTwoStates(45, 25);
                  break;
               case 48:
                  if (curChar == 66)
                     jjstateSet[jjnewStateCnt++] = 47;
                  break;
               case 53:
                  if ((0x2000000020L & l) != 0L)
                     jjAddStates(71, 72);
                  break;
               case 56:
                  if ((0x1000000010L & l) != 0L && kind > 83)
                     kind = 83;
                  break;
               case 58:
                  if ((0x100000001000L & l) != 0L && kind > 84)
                     kind = 84;
                  break;
               case 61:
                  if ((0x2000000020L & l) != 0L)
                     jjAddStates(73, 74);
                  break;
               case 64:
                  if ((0x4000000040L & l) != 0L && kind > 85)
                     kind = 85;
                  break;
               case 69:
                  if ((0x2000000020L & l) != 0L)
                     jjAddStates(75, 76);
                  break;
               case 73:
                  if ((0x2000000020L & l) != 0L)
                     jjAddStates(77, 78);
                  break;
               case 77:
                  if ((0x2000000020L & l) != 0L)
                     jjAddStates(79, 80);
                  break;
               case 84:
                  if ((0x2000000020L & l) != 0L)
                     jjAddStates(81, 82);
                  break;
               case 88:
                  if ((0x2000000020L & l) != 0L)
                     jjAddStates(83, 84);
                  break;
               case 92:
                  if ((0x2000000020L & l) != 0L)
                     jjAddStates(85, 86);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int hiByte = (int)(curChar >> 8);
         int i1 = hiByte >> 6;
         long l1 = 1L << (hiByte & 077);
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 3:
               case 5:
                  if (!jjCanMove_1(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 74)
                     kind = 74;
                  jjCheckNAdd(5);
                  break;
               case 1:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2) && kind > 7)
                     kind = 7;
                  break;
               case 7:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     jjAddStates(32, 34);
                  break;
               case 16:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     jjAddStates(0, 2);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 98 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
private final int jjMoveStringLiteralDfa0_3()
{
   switch(curChar)
   {
      case 42:
         return jjMoveStringLiteralDfa1_3(0x800L);
      default :
         return 1;
   }
}
private final int jjMoveStringLiteralDfa1_3(long active0)
{
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      return 1;
   }
   switch(curChar)
   {
      case 47:
         if ((active0 & 0x800L) != 0L)
            return jjStopAtPos(1, 11);
         break;
      default :
         return 2;
   }
   return 2;
}
private final int jjMoveStringLiteralDfa0_1()
{
   return jjMoveNfa_1(0, 0);
}
private final int jjMoveNfa_1(int startState, int curPos)
{
   int[] nextStates;
   int startsAt = 0;
   jjnewStateCnt = 1;
   int i = 1;
   jjstateSet[0] = startState;
   int j, kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if ((0xffffffffffffdbffL & l) == 0L)
                     break;
                  kind = 9;
                  jjstateSet[jjnewStateCnt++] = 0;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  kind = 9;
                  jjstateSet[jjnewStateCnt++] = 0;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int hiByte = (int)(curChar >> 8);
         int i1 = hiByte >> 6;
         long l1 = 1L << (hiByte & 077);
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if (!jjCanMove_0(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 9)
                     kind = 9;
                  jjstateSet[jjnewStateCnt++] = 0;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 1 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
private final int jjMoveStringLiteralDfa0_2()
{
   switch(curChar)
   {
      case 42:
         return jjMoveStringLiteralDfa1_2(0x400L);
      default :
         return 1;
   }
}
private final int jjMoveStringLiteralDfa1_2(long active0)
{
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      return 1;
   }
   switch(curChar)
   {
      case 47:
         if ((active0 & 0x400L) != 0L)
            return jjStopAtPos(1, 10);
         break;
      default :
         return 2;
   }
   return 2;
}
static final int[] jjnextStates = {
   16, 17, 19, 50, 81, 82, 87, 88, 91, 92, 56, 57, 58, 66, 67, 72, 
   73, 76, 77, 64, 50, 51, 57, 59, 65, 80, 15, 28, 33, 38, 43, 48, 
   7, 8, 10, 81, 82, 87, 88, 91, 92, 56, 66, 67, 72, 73, 76, 77, 
   64, 52, 53, 56, 60, 61, 64, 68, 69, 64, 76, 77, 64, 83, 84, 56, 
   91, 92, 56, 9, 11, 18, 20, 54, 55, 62, 63, 70, 71, 74, 75, 78, 
   79, 85, 86, 89, 90, 93, 94, 
};
private static final boolean jjCanMove_0(int hiByte, int i1, int i2, long l1, long l2)
{
   switch(hiByte)
   {
      case 0:
         return ((jjbitVec2[i2] & l2) != 0L);
      default : 
         if ((jjbitVec0[i1] & l1) != 0L)
            return true;
         return false;
   }
}
private static final boolean jjCanMove_1(int hiByte, int i1, int i2, long l1, long l2)
{
   switch(hiByte)
   {
      case 0:
         return ((jjbitVec3[i2] & l2) != 0L);
      default : 
         return false;
   }
}
public static final String[] jjstrLiteralImages = {
"", null, null, null, null, null, null, null, null, null, null, null, null, 
"\101\120\120\114\131", "\101\123\123\105\122\124", "\101\124\124\122\111\102", 
"\43\143\157\144\145\142\141\163\145", "\54", "\104\101\124\101", "\145\170\164\145\156\144\163", 
"\146\141\154\163\145", "\110\105\122\105", "\110\117\123\124", "\43\151\156\143\154\165\144\145", 
"\120\122\117\120\105\122\124\131", "\111\120\122\117\120\105\122\124\131", 
"\105\116\126\120\122\117\120\105\122\124\131", "\111\105\116\126\120\122\117\120\105\122\124\131", 
"\103\117\116\123\124\101\116\124", "\114\101\132\131", "\173", "\133", "\116\125\114\114", 
"\117\120\124\111\117\116\101\114", "\120\101\122\105\116\124", "\120\122\117\103\105\123\123", "\175", "\135", 
"\72", "\122\117\117\124", "\73", "\124\102\104", "\124\110\111\123", 
"\164\162\165\145", "\174\135", "\133\174", "\55\55", "\50", "\51", "\53", "\55", "\52", "\57", 
"\45", "\53\53", "\74\76", "\75\75", "\41\75", "\76\75", "\74\75", "\76", "\74", 
"\46\46", "\174\174", "\170\174", "\41", "\55\76", "\111\106", "\124\110\105\116", 
"\105\114\123\105", "\106\111", "\123\127\111\124\103\110", 
"\105\116\104\123\127\111\124\103\110", "\126\101\122", null, null, null, null, null, null, null, null, null, null, 
null, null, null, };
public static final String[] lexStateNames = {
   "DEFAULT", 
   "IN_SINGLE_LINE_COMMENT", 
   "IN_FORMAL_COMMENT", 
   "IN_MULTI_LINE_COMMENT", 
};
public static final int[] jjnewLexState = {
   -1, -1, -1, -1, -1, -1, 1, 2, 3, 0, 0, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
};
static final long[] jjtoToken = {
   0xffffffffffffe001L, 0x79c7ffL, 
};
static final long[] jjtoSkip = {
   0xe3eL, 0x0L, 
};
static final long[] jjtoSpecial = {
   0xe00L, 0x0L, 
};
static final long[] jjtoMore = {
   0x11c0L, 0x0L, 
};
protected JavaCharStream input_stream;
private final int[] jjrounds = new int[98];
private final int[] jjstateSet = new int[196];
StringBuffer image;
int jjimageLen;
int lengthOfMatch;
protected char curChar;
public DefaultParserTokenManager(JavaCharStream stream){
   if (JavaCharStream.staticFlag)
      throw new Error("ERROR: Cannot use a static CharStream class with a non-static lexical analyzer.");
   input_stream = stream;
}
public DefaultParserTokenManager(JavaCharStream stream, int lexState){
   this(stream);
   SwitchTo(lexState);
}
public void ReInit(JavaCharStream stream)
{
   jjmatchedPos = jjnewStateCnt = 0;
   curLexState = defaultLexState;
   input_stream = stream;
   ReInitRounds();
}
private final void ReInitRounds()
{
   int i;
   jjround = 0x80000001;
   for (i = 98; i-- > 0;)
      jjrounds[i] = 0x80000000;
}
public void ReInit(JavaCharStream stream, int lexState)
{
   ReInit(stream);
   SwitchTo(lexState);
}
public void SwitchTo(int lexState)
{
   if (lexState >= 4 || lexState < 0)
      throw new TokenMgrError("Error: Ignoring invalid lexical state : " + lexState + ". State unchanged.", TokenMgrError.INVALID_LEXICAL_STATE);
   else
      curLexState = lexState;
}

protected Token jjFillToken()
{
   Token t = Token.newToken(jjmatchedKind);
   t.kind = jjmatchedKind;
   if (jjmatchedPos < 0)
   {
      if (image == null)
         t.image = "";
      else
         t.image = image.toString();
      t.beginLine = t.endLine = input_stream.getBeginLine();
      t.beginColumn = t.endColumn = input_stream.getBeginColumn();
   }
   else
   {
      String im = jjstrLiteralImages[jjmatchedKind];
      t.image = (im == null) ? input_stream.GetImage() : im;
      t.beginLine = input_stream.getBeginLine();
      t.beginColumn = input_stream.getBeginColumn();
      t.endLine = input_stream.getEndLine();
      t.endColumn = input_stream.getEndColumn();
   }
   return t;
}

int curLexState = 0;
int defaultLexState = 0;
int jjnewStateCnt;
int jjround;
int jjmatchedPos;
int jjmatchedKind;

public Token getNextToken() 
{
  int kind;
  Token specialToken = null;
  Token matchedToken;
  int curPos = 0;

  EOFLoop :
  for (;;)
  {   
   try   
   {     
      curChar = input_stream.BeginToken();
   }     
   catch(java.io.IOException e)
   {        
      jjmatchedKind = 0;
      matchedToken = jjFillToken();
      matchedToken.specialToken = specialToken;
      return matchedToken;
   }
   image = null;
   jjimageLen = 0;

   for (;;)
   {
     switch(curLexState)
     {
       case 0:
         try { input_stream.backup(0);
            while (curChar <= 32 && (0x100003600L & (1L << curChar)) != 0L)
               curChar = input_stream.BeginToken();
         }
         catch (java.io.IOException e1) { continue EOFLoop; }
         jjmatchedKind = 0x7fffffff;
         jjmatchedPos = 0;
         curPos = jjMoveStringLiteralDfa0_0();
         break;
       case 1:
         jjmatchedKind = 9;
         jjmatchedPos = -1;
         curPos = 0;
         curPos = jjMoveStringLiteralDfa0_1();
         break;
       case 2:
         jjmatchedKind = 0x7fffffff;
         jjmatchedPos = 0;
         curPos = jjMoveStringLiteralDfa0_2();
         if (jjmatchedPos == 0 && jjmatchedKind > 12)
         {
            jjmatchedKind = 12;
         }
         break;
       case 3:
         jjmatchedKind = 0x7fffffff;
         jjmatchedPos = 0;
         curPos = jjMoveStringLiteralDfa0_3();
         if (jjmatchedPos == 0 && jjmatchedKind > 12)
         {
            jjmatchedKind = 12;
         }
         break;
     }
     if (jjmatchedKind != 0x7fffffff)
     {
        if (jjmatchedPos + 1 < curPos)
           input_stream.backup(curPos - jjmatchedPos - 1);
        if ((jjtoToken[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
        {
           matchedToken = jjFillToken();
           matchedToken.specialToken = specialToken;
       if (jjnewLexState[jjmatchedKind] != -1)
         curLexState = jjnewLexState[jjmatchedKind];
           return matchedToken;
        }
        else if ((jjtoSkip[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
        {
           if ((jjtoSpecial[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
           {
              matchedToken = jjFillToken();
              if (specialToken == null)
                 specialToken = matchedToken;
              else
              {
                 matchedToken.specialToken = specialToken;
                 specialToken = (specialToken.next = matchedToken);
              }
              SkipLexicalActions(matchedToken);
           }
           else 
              SkipLexicalActions(null);
         if (jjnewLexState[jjmatchedKind] != -1)
           curLexState = jjnewLexState[jjmatchedKind];
           continue EOFLoop;
        }
        MoreLexicalActions();
      if (jjnewLexState[jjmatchedKind] != -1)
        curLexState = jjnewLexState[jjmatchedKind];
        curPos = 0;
        jjmatchedKind = 0x7fffffff;
        try {
           curChar = input_stream.readChar();
           continue;
        }
        catch (java.io.IOException e1) { }
     }
     int error_line = input_stream.getEndLine();
     int error_column = input_stream.getEndColumn();
     String error_after = null;
     boolean EOFSeen = false;
     try { input_stream.readChar(); input_stream.backup(1); }
     catch (java.io.IOException e1) {
        EOFSeen = true;
        error_after = curPos <= 1 ? "" : input_stream.GetImage();
        if (curChar == '\n' || curChar == '\r') {
           error_line++;
           error_column = 0;
        }
        else
           error_column++;
     }
     if (!EOFSeen) {
        input_stream.backup(1);
        error_after = curPos <= 1 ? "" : input_stream.GetImage();
     }
     throw new TokenMgrError(EOFSeen, curLexState, error_line, error_column, error_after, curChar, TokenMgrError.LEXICAL_ERROR);
   }
  }
}

void SkipLexicalActions(Token matchedToken)
{
   switch(jjmatchedKind)
   {
      default :
         break;
   }
}
void MoreLexicalActions()
{
   jjimageLen += (lengthOfMatch = jjmatchedPos + 1);
   switch(jjmatchedKind)
   {
      case 7 :
         if (image == null)
            image = new StringBuffer();
         image.append(input_stream.GetSuffix(jjimageLen));
         jjimageLen = 0;
                   input_stream.backup(1);
         break;
      default : 
         break;
   }
}
}
